{"ast":null,"code":"import _asyncToGenerator from \"D:/POCs/PowerBI/PowerBI/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { models } from 'powerbi-client';\nimport { PowerBIReportEmbedComponent } from 'powerbi-client-angular'; //import 'powerbi-report-authoring';\n\nimport { errorClass, errorElement, hidden, position, reportUrl, reportListUrl, successClass, successElement } from './constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"powerbi-client-angular\";\nconst _c0 = [\"status\"];\nconst _c1 = [\"embedReportBtn\"];\n\nfunction PowerBiEmbeddedComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementStart(1, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function PowerBiEmbeddedComponent_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.hideFilterPane();\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function PowerBiEmbeddedComponent_div_2_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.setDataSelectedEvent();\n    });\n    i0.ɵɵtext(4, \"Set Event\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 7, 8);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.filterPanelShown == true ? \"Hide Filter Pane\" : \"Show Filter Pane\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r0.displayMessage);\n  }\n}\n\nfunction PowerBiEmbeddedComponent_ng_template_3_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function PowerBiEmbeddedComponent_ng_template_3_button_5_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const rpt_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.embedReport(rpt_r9.reportId);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const rpt_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(rpt_r9.reportName);\n  }\n}\n\nfunction PowerBiEmbeddedComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9, 8);\n    i0.ɵɵelementStart(2, \"label\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 10);\n    i0.ɵɵtemplate(5, PowerBiEmbeddedComponent_ng_template_3_button_5_Template, 2, 1, \"button\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"div\", 12);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r2.displayMessage);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.reportList);\n  }\n}\n\nexport class PowerBiEmbeddedComponent {\n  constructor(http, element, baseUrl) {\n    this.http = http;\n    this.element = element; // Track Report embedding status\n\n    this.isEmbedded = false; // Overall status message of embedding\n\n    this.displayMessage = 'Click button to load report.'; // CSS Class to be passed to the wrapper\n    // Hide the report container initially\n\n    this.reportClass = 'report-container hidden'; // Flag which specify the type of embedding\n\n    this.phasedEmbeddingFlag = false;\n    this.filterPanelShown = true; // Pass the basic embed configurations to the wrapper to bootstrap the report on first load\n    // Values for properties like embedUrl, accessToken and settings will be set on click of button\n\n    this.reportConfig = {\n      type: 'report',\n      embedUrl: undefined,\n      tokenType: models.TokenType.Embed,\n      accessToken: undefined,\n      settings: undefined\n    };\n    this.paginatedReportConfig = {\n      type: 'report',\n      embedUrl: undefined,\n      tokenType: models.TokenType.Embed,\n      accessToken: undefined,\n      settings: undefined\n    };\n    /**\r\n     * Map of event handlers to be applied to the embedded report\r\n     */\n    // Update event handlers for the report by redefining the map using this.eventHandlersMap\n    // Set event handler to null if event needs to be removed\n    // More events can be provided from here\n    // https://docs.microsoft.com/en-us/javascript/api/overview/powerbi/handle-events#report-events\n\n    this.eventHandlersMap = new Map([['loaded', () => {\n      console.log('Report has loaded');\n    }], ['rendered', () => {\n      console.log('Report has rendered'); // Set displayMessage to empty when rendered for the first time\n\n      if (!this.isEmbedded) {\n        this.displayMessage = 'Use the buttons above to interact with the report using Power BI Client APIs.';\n      } // Update embed status\n\n\n      this.isEmbedded = true;\n    }], ['error', event => {\n      if (event) {\n        console.error(event.detail);\n      }\n    }], ['visualClicked', () => console.log('visual clicked')], ['pageChanged', event => console.log(event)]]);\n    this._baseUrl = baseUrl;\n  }\n\n  ngOnInit() {\n    try {\n      this.http.get(this._baseUrl + reportListUrl).subscribe(reportList => {\n        this.reportList = reportList;\n      }, error => {\n        console.error(error);\n      });\n    } catch (error) {\n      // Prepare status message for Embed failure\n      this.prepareDisplayMessageForEmbed(errorElement, errorClass);\n      this.displayMessage = `Failed to fetch config for report. Status: ${error.statusText} Status Code: ${error.status}`;\n      console.error(this.displayMessage);\n      return;\n    }\n  }\n  /**\r\n   * Embeds report\r\n   *\r\n   * @returns Promise<void>\r\n   */\n\n\n  embedReport(reportId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let reportConfigResponse; // Get the embed config from the service and set the reportConfigResponse\n\n      try {\n        if (!reportId) {\n          reportConfigResponse = yield _this.http.get(_this._baseUrl + reportUrl).toPromise();\n        } else {\n          reportConfigResponse = yield _this.http.get(_this._baseUrl + reportUrl + \"/\" + reportId).toPromise();\n        }\n      } catch (error) {\n        // Prepare status message for Embed failure\n        yield _this.prepareDisplayMessageForEmbed(errorElement, errorClass);\n        _this.displayMessage = `Failed to fetch config for report. Status: ${error.statusText} Status Code: ${error.status}`;\n        console.error(_this.displayMessage);\n        return;\n      } // Update the reportConfig to embed the PowerBI report\n      // this.reportConfig = {\n      //   ...this.reportConfig,\n      //   id: reportConfigResponse.embedReport.reportId,\n      //   embedUrl: reportConfigResponse.embedReport.embedUrl,\n      //   accessToken: reportConfigResponse.embedToken.token,\n      //   settings: {\n      //     layoutType: models.LayoutType.Custom,\n      //     customLayout: {\n      //       displayOption: models.DisplayOption.FitToPage\n      //     }\n      //   }\n      // };\n\n\n      _this.paginatedReportConfig = Object.assign(Object.assign({}, _this.paginatedReportConfig), {\n        id: reportConfigResponse.embedReport.reportId,\n        embedUrl: reportConfigResponse.embedReport.embedUrl,\n        accessToken: reportConfigResponse.embedToken.token,\n        settings: {\n          layoutType: models.LayoutType.Custom,\n          customLayout: {\n            displayOption: models.DisplayOption.FitToPage\n          }\n        }\n      }); // Get the reference of the report-container div\n\n      const reportDiv = _this.element.nativeElement.querySelector('.report-container');\n\n      if (reportDiv) {\n        // When Embed report is clicked, show the report container div\n        console.log('remove hidden');\n        reportDiv.classList.remove(hidden);\n        console.log(window.innerWidth);\n        const viewerHeight = window.innerWidth - 1000;\n        reportDiv.setAttribute(\"style\", \"height: \" + viewerHeight + \"px;\");\n      } // Get the reference of the display-message div\n\n\n      const displayMessage = _this.element.nativeElement.querySelector('.display-message');\n\n      if (displayMessage) {\n        // When Embed report is clicked, change the position of the display-message\n        displayMessage.classList.remove(position);\n      } // Prepare status message for Embed success\n\n\n      yield _this.prepareDisplayMessageForEmbed(successElement, successClass); // Update the display message\n\n      _this.displayMessage = 'Access token is successfully set. Loading Power BI report.';\n    })();\n  }\n  /**\r\n   * Handle Report embedding flow\r\n   * @param img Image to show with the display message\r\n   * @param type Type of the message\r\n   *\r\n   * @returns Promise<void>\r\n   */\n\n\n  prepareDisplayMessageForEmbed(img, type) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // Remove the Embed Report button from UI\n      _this2.embedBtnRef.nativeElement.remove(); // Prepend the Image element to the display message\n\n\n      _this2.statusRef.nativeElement.prepend(img); // Set type of the message\n\n\n      _this2.statusRef.nativeElement.classList.add(type);\n    })();\n  }\n  /**\r\n   * Delete visual\r\n   *\r\n   * @returns Promise<void>\r\n   */\n  // async deleteVisual(): Promise<void> {\n  //  // Get report from the wrapper component\n  //  const report: Report = this.reportObj.getReport();\n  //  if (!report) {\n  //    // Prepare status message for Error\n  //    this.prepareStatusMessage(errorElement, errorClass);\n  //    this.displayMessage = 'Report not available.';\n  //    console.log(this.displayMessage);\n  //    return;\n  //  }\n  //  // Get all the pages of the report\n  //  const pages: Page[] = await report.getPages();\n  //  // Check if all the pages of the report deleted\n  //  if (pages.length === 0) {\n  //    // Prepare status message for Error\n  //    this.prepareStatusMessage(errorElement, errorClass);\n  //    this.displayMessage = 'No pages found.';\n  //    console.log(this.displayMessage);\n  //    return;\n  //  }\n  //  // Get active page of the report\n  //  const activePage: Page | undefined = pages.find((page) => page.isActive);\n  //  if (activePage) {\n  //    // Get all visuals in the active page of the report\n  //    const visuals: VisualDescriptor[] = await activePage.getVisuals();\n  //    if (visuals.length === 0) {\n  //      // Prepare status message for Error\n  //      this.prepareStatusMessage(errorElement, errorClass);\n  //      this.displayMessage = 'No visuals found.';\n  //      console.log(this.displayMessage);\n  //      return;\n  //    }\n  //    // Get first visible visual\n  //    const visual: VisualDescriptor | undefined = visuals.find((v) => v.layout.displayState?.mode === models.VisualContainerDisplayMode.Visible);\n  //    // No visible visual found\n  //    if (!visual) {\n  //      // Prepare status message for Error\n  //      this.prepareStatusMessage(errorElement, errorClass);\n  //      this.displayMessage = 'No visible visual available to delete.';\n  //      console.log(this.displayMessage);\n  //      return;\n  //    }\n  //    try {\n  //      // Delete the visual using powerbi-report-authoring\n  //      // For more information: https://docs.microsoft.com/en-us/javascript/api/overview/powerbi/report-authoring-overview\n  //      const response = await activePage.deleteVisual(visual.name);\n  //      // Prepare status message for success\n  //      this.prepareStatusMessage(successElement, successClass);\n  //      this.displayMessage = `${visual.type} visual was deleted.`;\n  //      console.log(this.displayMessage);\n  //      return response;\n  //    } catch (error) {\n  //      console.error(error);\n  //    }\n  //  }\n  // }\n\n  /**\r\n   * Hide Filter Pane\r\n   *\r\n   * @returns Promise<IHttpPostMessageResponse<void> | undefined>\r\n   */\n\n\n  hideFilterPane() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // Get report from the wrapper component\n      const report = _this3.reportObj.getReport();\n\n      if (!report) {\n        // Prepare status message for Error\n        _this3.prepareStatusMessage(errorElement, errorClass);\n\n        _this3.displayMessage = 'Report not available.';\n        console.log(_this3.displayMessage);\n        return;\n      }\n\n      _this3.filterPanelShown = !_this3.filterPanelShown; // New settings to hide filter pane\n\n      const settings = {\n        panes: {\n          filters: {\n            expanded: _this3.filterPanelShown,\n            visible: _this3.filterPanelShown\n          }\n        }\n      };\n\n      try {\n        const response = yield report.updateSettings(settings); // Prepare status message for success\n\n        _this3.prepareStatusMessage(successElement, successClass);\n\n        _this3.displayMessage = 'Filter pane is hidden.';\n        console.log(_this3.displayMessage);\n        return response;\n      } catch (error) {\n        console.error(error);\n        return;\n      }\n    })();\n  }\n  /**\r\n   * Set data selected event\r\n   *\r\n   * @returns void\r\n   */\n\n\n  setDataSelectedEvent() {\n    // Adding dataSelected event in eventHandlersMap\n    this.eventHandlersMap = new Map([...this.eventHandlersMap, ['dataSelected', event => console.log(event)]]); // Prepare status message for success\n\n    this.prepareStatusMessage(successElement, successClass);\n    this.displayMessage = 'Data Selected event set successfully. Select data to see event in console.';\n  }\n  /**\r\n   * Prepare status message while using JS SDK APIs\r\n   * @param img Image to show with the display message\r\n   * @param type Type of the message\r\n   *\r\n   * @returns void\r\n   */\n\n\n  prepareStatusMessage(img, type) {\n    // Prepend Image to the display message\n    this.statusRef.nativeElement.prepend(img); // Add class to the display message\n\n    this.statusRef.nativeElement.classList.add(type);\n  }\n\n}\n\nPowerBiEmbeddedComponent.ɵfac = function PowerBiEmbeddedComponent_Factory(t) {\n  return new (t || PowerBiEmbeddedComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject('BASE_URL'));\n};\n\nPowerBiEmbeddedComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PowerBiEmbeddedComponent,\n  selectors: [[\"app-power-bi-embedded\"]],\n  viewQuery: function PowerBiEmbeddedComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(PowerBIReportEmbedComponent, 5);\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reportObj = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.statusRef = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.embedBtnRef = _t.first);\n    }\n  },\n  decls: 7,\n  vars: 4,\n  consts: [[\"class\", \"controls\", 4, \"ngIf\", \"ngIfElse\"], [\"embedReportFlow\", \"\"], [1, \"row\"], [3, \"embedConfig\", \"cssClassName\"], [1, \"controls\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"display-message\"], [\"status\", \"\"], [1, \"display-message\", \"position\"], [1, \"embed-report\", \"d-grid\", \"gap-2\"], [\"type\", \"button\", \"class\", \"btn btn-primary\", \"id\", \"rpt.reportId\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"separator\"], [\"type\", \"button\", \"id\", \"rpt.reportId\", 1, \"btn\", \"btn-primary\", 3, \"click\"]],\n  template: function PowerBiEmbeddedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Power BI Embedded - Angular Demo\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, PowerBiEmbeddedComponent_div_2_Template, 8, 2, \"div\", 0);\n      i0.ɵɵtemplate(3, PowerBiEmbeddedComponent_ng_template_3_Template, 7, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(5, \"div\", 2);\n      i0.ɵɵelement(6, \"powerbi-paginated-report\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(4);\n\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.isEmbedded)(\"ngIfElse\", _r1);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"embedConfig\", ctx.paginatedReportConfig)(\"cssClassName\", ctx.reportClass);\n    }\n  },\n  directives: [i2.NgIf, i3.PowerBIPaginatedReportEmbedComponent, i2.NgForOf],\n  styles: [\"iframe[_ngcontent-%COMP%] {\\r\\n  border: none;\\r\\n \\r\\n}\\r\\n\\r\\n\\r\\n.report-container[_ngcontent-%COMP%] {\\r\\n  margin: 8px auto;\\r\\n  width: 90%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvd2VyLWJpLWVtYmVkZGVkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7aUNBQ2lDOzs7QUFHakM7RUFDRSxZQUFZOztBQUVkOzs7QUFJQTtFQUNFLGdCQUFnQjtFQUNoQixVQUFVO0FBQ1oiLCJmaWxlIjoicG93ZXItYmktZW1iZWRkZWQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuICovXHJcblxyXG5cclxuaWZyYW1lIHtcclxuICBib3JkZXI6IG5vbmU7XHJcbiBcclxufVxyXG5cclxuXHJcblxyXG4ucmVwb3J0LWNvbnRhaW5lciB7XHJcbiAgbWFyZ2luOiA4cHggYXV0bztcclxuICB3aWR0aDogOTAlO1xyXG59XHJcbiJdfQ== */\"]\n});","map":{"version":3,"sources":["D:/POCs/PowerBI/PowerBI/ClientApp/src/app/power-bi-embedded/power-bi-embedded.component.ts"],"names":["models","PowerBIReportEmbedComponent","errorClass","errorElement","hidden","position","reportUrl","reportListUrl","successClass","successElement","i0","i1","i2","i3","_c0","_c1","PowerBiEmbeddedComponent_div_2_Template","rf","ctx","_r5","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","PowerBiEmbeddedComponent_div_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r4","ɵɵnextContext","hideFilterPane","ɵɵtext","ɵɵelementEnd","PowerBiEmbeddedComponent_div_2_Template_button_click_3_listener","ctx_r6","setDataSelectedEvent","ctx_r0","ɵɵadvance","ɵɵtextInterpolate","filterPanelShown","displayMessage","PowerBiEmbeddedComponent_ng_template_3_button_5_Template","_r11","PowerBiEmbeddedComponent_ng_template_3_button_5_Template_button_click_0_listener","restoredCtx","rpt_r9","$implicit","ctx_r10","embedReport","reportId","reportName","PowerBiEmbeddedComponent_ng_template_3_Template","ɵɵtemplate","ɵɵelement","ctx_r2","ɵɵproperty","reportList","PowerBiEmbeddedComponent","constructor","http","element","baseUrl","isEmbedded","reportClass","phasedEmbeddingFlag","reportConfig","type","embedUrl","undefined","tokenType","TokenType","Embed","accessToken","settings","paginatedReportConfig","eventHandlersMap","Map","console","log","event","error","detail","_baseUrl","ngOnInit","get","subscribe","prepareDisplayMessageForEmbed","statusText","status","reportConfigResponse","toPromise","Object","assign","id","embedToken","token","layoutType","LayoutType","Custom","customLayout","displayOption","DisplayOption","FitToPage","reportDiv","nativeElement","querySelector","classList","remove","window","innerWidth","viewerHeight","setAttribute","img","embedBtnRef","statusRef","prepend","add","report","reportObj","getReport","prepareStatusMessage","panes","filters","expanded","visible","response","updateSettings","ɵfac","PowerBiEmbeddedComponent_Factory","t","ɵɵdirectiveInject","HttpClient","ElementRef","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","PowerBiEmbeddedComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","decls","vars","consts","template","PowerBiEmbeddedComponent_Template","ɵɵtemplateRefExtractor","_r1","ɵɵreference","directives","NgIf","PowerBIPaginatedReportEmbedComponent","NgForOf","styles"],"mappings":"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","sourcesContent":["import { models } from 'powerbi-client';\r\nimport { PowerBIReportEmbedComponent } from 'powerbi-client-angular';\r\n//import 'powerbi-report-authoring';\r\nimport { errorClass, errorElement, hidden, position, reportUrl, reportListUrl, successClass, successElement } from './constants';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"@angular/common\";\r\nimport * as i3 from \"powerbi-client-angular\";\r\nconst _c0 = [\"status\"];\r\nconst _c1 = [\"embedReportBtn\"];\r\nfunction PowerBiEmbeddedComponent_div_2_Template(rf, ctx) { if (rf & 1) {\r\n    const _r5 = i0.ɵɵgetCurrentView();\r\n    i0.ɵɵelementStart(0, \"div\", 4);\r\n    i0.ɵɵelementStart(1, \"button\", 5);\r\n    i0.ɵɵlistener(\"click\", function PowerBiEmbeddedComponent_div_2_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.hideFilterPane(); });\r\n    i0.ɵɵtext(2);\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementStart(3, \"button\", 6);\r\n    i0.ɵɵlistener(\"click\", function PowerBiEmbeddedComponent_div_2_Template_button_click_3_listener() { i0.ɵɵrestoreView(_r5); const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.setDataSelectedEvent(); });\r\n    i0.ɵɵtext(4, \"Set Event\");\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementStart(5, \"div\", 7, 8);\r\n    i0.ɵɵtext(7);\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(2);\r\n    i0.ɵɵtextInterpolate(ctx_r0.filterPanelShown == true ? \"Hide Filter Pane\" : \"Show Filter Pane\");\r\n    i0.ɵɵadvance(5);\r\n    i0.ɵɵtextInterpolate(ctx_r0.displayMessage);\r\n} }\r\nfunction PowerBiEmbeddedComponent_ng_template_3_button_5_Template(rf, ctx) { if (rf & 1) {\r\n    const _r11 = i0.ɵɵgetCurrentView();\r\n    i0.ɵɵelementStart(0, \"button\", 13);\r\n    i0.ɵɵlistener(\"click\", function PowerBiEmbeddedComponent_ng_template_3_button_5_Template_button_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r11); const rpt_r9 = restoredCtx.$implicit; const ctx_r10 = i0.ɵɵnextContext(2); return ctx_r10.embedReport(rpt_r9.reportId); });\r\n    i0.ɵɵtext(1);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const rpt_r9 = ctx.$implicit;\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵtextInterpolate(rpt_r9.reportName);\r\n} }\r\nfunction PowerBiEmbeddedComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"div\", 9, 8);\r\n    i0.ɵɵelementStart(2, \"label\");\r\n    i0.ɵɵtext(3);\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementStart(4, \"div\", 10);\r\n    i0.ɵɵtemplate(5, PowerBiEmbeddedComponent_ng_template_3_button_5_Template, 2, 1, \"button\", 11);\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelement(6, \"div\", 12);\r\n} if (rf & 2) {\r\n    const ctx_r2 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(3);\r\n    i0.ɵɵtextInterpolate(ctx_r2.displayMessage);\r\n    i0.ɵɵadvance(2);\r\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.reportList);\r\n} }\r\nexport class PowerBiEmbeddedComponent {\r\n    constructor(http, element, baseUrl) {\r\n        this.http = http;\r\n        this.element = element;\r\n        // Track Report embedding status\r\n        this.isEmbedded = false;\r\n        // Overall status message of embedding\r\n        this.displayMessage = 'Click button to load report.';\r\n        // CSS Class to be passed to the wrapper\r\n        // Hide the report container initially\r\n        this.reportClass = 'report-container hidden';\r\n        // Flag which specify the type of embedding\r\n        this.phasedEmbeddingFlag = false;\r\n        this.filterPanelShown = true;\r\n        // Pass the basic embed configurations to the wrapper to bootstrap the report on first load\r\n        // Values for properties like embedUrl, accessToken and settings will be set on click of button\r\n        this.reportConfig = {\r\n            type: 'report',\r\n            embedUrl: undefined,\r\n            tokenType: models.TokenType.Embed,\r\n            accessToken: undefined,\r\n            settings: undefined,\r\n        };\r\n        this.paginatedReportConfig = {\r\n            type: 'report',\r\n            embedUrl: undefined,\r\n            tokenType: models.TokenType.Embed,\r\n            accessToken: undefined,\r\n            settings: undefined\r\n        };\r\n        /**\r\n         * Map of event handlers to be applied to the embedded report\r\n         */\r\n        // Update event handlers for the report by redefining the map using this.eventHandlersMap\r\n        // Set event handler to null if event needs to be removed\r\n        // More events can be provided from here\r\n        // https://docs.microsoft.com/en-us/javascript/api/overview/powerbi/handle-events#report-events\r\n        this.eventHandlersMap = new Map([\r\n            ['loaded', () => {\r\n                    console.log('Report has loaded');\r\n                }],\r\n            [\r\n                'rendered',\r\n                () => {\r\n                    console.log('Report has rendered');\r\n                    // Set displayMessage to empty when rendered for the first time\r\n                    if (!this.isEmbedded) {\r\n                        this.displayMessage = 'Use the buttons above to interact with the report using Power BI Client APIs.';\r\n                    }\r\n                    // Update embed status\r\n                    this.isEmbedded = true;\r\n                },\r\n            ],\r\n            [\r\n                'error',\r\n                (event) => {\r\n                    if (event) {\r\n                        console.error(event.detail);\r\n                    }\r\n                },\r\n            ],\r\n            ['visualClicked', () => console.log('visual clicked')],\r\n            ['pageChanged', (event) => console.log(event)],\r\n        ]);\r\n        this._baseUrl = baseUrl;\r\n    }\r\n    ngOnInit() {\r\n        try {\r\n            this.http.get(this._baseUrl + reportListUrl).subscribe(reportList => {\r\n                this.reportList = reportList;\r\n            }, error => {\r\n                console.error(error);\r\n            });\r\n        }\r\n        catch (error) {\r\n            // Prepare status message for Embed failure\r\n            this.prepareDisplayMessageForEmbed(errorElement, errorClass);\r\n            this.displayMessage = `Failed to fetch config for report. Status: ${error.statusText} Status Code: ${error.status}`;\r\n            console.error(this.displayMessage);\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n     * Embeds report\r\n     *\r\n     * @returns Promise<void>\r\n     */\r\n    async embedReport(reportId) {\r\n        let reportConfigResponse;\r\n        // Get the embed config from the service and set the reportConfigResponse\r\n        try {\r\n            if (!reportId) {\r\n                reportConfigResponse = await this.http.get(this._baseUrl + reportUrl).toPromise();\r\n            }\r\n            else {\r\n                reportConfigResponse = await this.http.get(this._baseUrl + reportUrl + \"/\" + reportId).toPromise();\r\n            }\r\n        }\r\n        catch (error) {\r\n            // Prepare status message for Embed failure\r\n            await this.prepareDisplayMessageForEmbed(errorElement, errorClass);\r\n            this.displayMessage = `Failed to fetch config for report. Status: ${error.statusText} Status Code: ${error.status}`;\r\n            console.error(this.displayMessage);\r\n            return;\r\n        }\r\n        // Update the reportConfig to embed the PowerBI report\r\n        // this.reportConfig = {\r\n        //   ...this.reportConfig,\r\n        //   id: reportConfigResponse.embedReport.reportId,\r\n        //   embedUrl: reportConfigResponse.embedReport.embedUrl,\r\n        //   accessToken: reportConfigResponse.embedToken.token,\r\n        //   settings: {\r\n        //     layoutType: models.LayoutType.Custom,\r\n        //     customLayout: {\r\n        //       displayOption: models.DisplayOption.FitToPage\r\n        //     }\r\n        //   }\r\n        // };\r\n        this.paginatedReportConfig = Object.assign(Object.assign({}, this.paginatedReportConfig), { id: reportConfigResponse.embedReport.reportId, embedUrl: reportConfigResponse.embedReport.embedUrl, accessToken: reportConfigResponse.embedToken.token, settings: {\r\n                layoutType: models.LayoutType.Custom,\r\n                customLayout: {\r\n                    displayOption: models.DisplayOption.FitToPage\r\n                }\r\n            } });\r\n        // Get the reference of the report-container div\r\n        const reportDiv = this.element.nativeElement.querySelector('.report-container');\r\n        if (reportDiv) {\r\n            // When Embed report is clicked, show the report container div\r\n            console.log('remove hidden');\r\n            reportDiv.classList.remove(hidden);\r\n            console.log(window.innerWidth);\r\n            const viewerHeight = window.innerWidth - 1000;\r\n            reportDiv.setAttribute(\"style\", \"height: \" + viewerHeight + \"px;\");\r\n        }\r\n        // Get the reference of the display-message div\r\n        const displayMessage = this.element.nativeElement.querySelector('.display-message');\r\n        if (displayMessage) {\r\n            // When Embed report is clicked, change the position of the display-message\r\n            displayMessage.classList.remove(position);\r\n        }\r\n        // Prepare status message for Embed success\r\n        await this.prepareDisplayMessageForEmbed(successElement, successClass);\r\n        // Update the display message\r\n        this.displayMessage = 'Access token is successfully set. Loading Power BI report.';\r\n    }\r\n    /**\r\n     * Handle Report embedding flow\r\n     * @param img Image to show with the display message\r\n     * @param type Type of the message\r\n     *\r\n     * @returns Promise<void>\r\n     */\r\n    async prepareDisplayMessageForEmbed(img, type) {\r\n        // Remove the Embed Report button from UI\r\n        this.embedBtnRef.nativeElement.remove();\r\n        // Prepend the Image element to the display message\r\n        this.statusRef.nativeElement.prepend(img);\r\n        // Set type of the message\r\n        this.statusRef.nativeElement.classList.add(type);\r\n    }\r\n    /**\r\n     * Delete visual\r\n     *\r\n     * @returns Promise<void>\r\n     */\r\n    // async deleteVisual(): Promise<void> {\r\n    //  // Get report from the wrapper component\r\n    //  const report: Report = this.reportObj.getReport();\r\n    //  if (!report) {\r\n    //    // Prepare status message for Error\r\n    //    this.prepareStatusMessage(errorElement, errorClass);\r\n    //    this.displayMessage = 'Report not available.';\r\n    //    console.log(this.displayMessage);\r\n    //    return;\r\n    //  }\r\n    //  // Get all the pages of the report\r\n    //  const pages: Page[] = await report.getPages();\r\n    //  // Check if all the pages of the report deleted\r\n    //  if (pages.length === 0) {\r\n    //    // Prepare status message for Error\r\n    //    this.prepareStatusMessage(errorElement, errorClass);\r\n    //    this.displayMessage = 'No pages found.';\r\n    //    console.log(this.displayMessage);\r\n    //    return;\r\n    //  }\r\n    //  // Get active page of the report\r\n    //  const activePage: Page | undefined = pages.find((page) => page.isActive);\r\n    //  if (activePage) {\r\n    //    // Get all visuals in the active page of the report\r\n    //    const visuals: VisualDescriptor[] = await activePage.getVisuals();\r\n    //    if (visuals.length === 0) {\r\n    //      // Prepare status message for Error\r\n    //      this.prepareStatusMessage(errorElement, errorClass);\r\n    //      this.displayMessage = 'No visuals found.';\r\n    //      console.log(this.displayMessage);\r\n    //      return;\r\n    //    }\r\n    //    // Get first visible visual\r\n    //    const visual: VisualDescriptor | undefined = visuals.find((v) => v.layout.displayState?.mode === models.VisualContainerDisplayMode.Visible);\r\n    //    // No visible visual found\r\n    //    if (!visual) {\r\n    //      // Prepare status message for Error\r\n    //      this.prepareStatusMessage(errorElement, errorClass);\r\n    //      this.displayMessage = 'No visible visual available to delete.';\r\n    //      console.log(this.displayMessage);\r\n    //      return;\r\n    //    }\r\n    //    try {\r\n    //      // Delete the visual using powerbi-report-authoring\r\n    //      // For more information: https://docs.microsoft.com/en-us/javascript/api/overview/powerbi/report-authoring-overview\r\n    //      const response = await activePage.deleteVisual(visual.name);\r\n    //      // Prepare status message for success\r\n    //      this.prepareStatusMessage(successElement, successClass);\r\n    //      this.displayMessage = `${visual.type} visual was deleted.`;\r\n    //      console.log(this.displayMessage);\r\n    //      return response;\r\n    //    } catch (error) {\r\n    //      console.error(error);\r\n    //    }\r\n    //  }\r\n    // }\r\n    /**\r\n     * Hide Filter Pane\r\n     *\r\n     * @returns Promise<IHttpPostMessageResponse<void> | undefined>\r\n     */\r\n    async hideFilterPane() {\r\n        // Get report from the wrapper component\r\n        const report = this.reportObj.getReport();\r\n        if (!report) {\r\n            // Prepare status message for Error\r\n            this.prepareStatusMessage(errorElement, errorClass);\r\n            this.displayMessage = 'Report not available.';\r\n            console.log(this.displayMessage);\r\n            return;\r\n        }\r\n        this.filterPanelShown = !this.filterPanelShown;\r\n        // New settings to hide filter pane\r\n        const settings = {\r\n            panes: {\r\n                filters: {\r\n                    expanded: this.filterPanelShown,\r\n                    visible: this.filterPanelShown,\r\n                },\r\n            },\r\n        };\r\n        try {\r\n            const response = await report.updateSettings(settings);\r\n            // Prepare status message for success\r\n            this.prepareStatusMessage(successElement, successClass);\r\n            this.displayMessage = 'Filter pane is hidden.';\r\n            console.log(this.displayMessage);\r\n            return response;\r\n        }\r\n        catch (error) {\r\n            console.error(error);\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n     * Set data selected event\r\n     *\r\n     * @returns void\r\n     */\r\n    setDataSelectedEvent() {\r\n        // Adding dataSelected event in eventHandlersMap\r\n        this.eventHandlersMap = new Map([\r\n            ...this.eventHandlersMap,\r\n            ['dataSelected', (event) => console.log(event)],\r\n        ]);\r\n        // Prepare status message for success\r\n        this.prepareStatusMessage(successElement, successClass);\r\n        this.displayMessage = 'Data Selected event set successfully. Select data to see event in console.';\r\n    }\r\n    /**\r\n     * Prepare status message while using JS SDK APIs\r\n     * @param img Image to show with the display message\r\n     * @param type Type of the message\r\n     *\r\n     * @returns void\r\n     */\r\n    prepareStatusMessage(img, type) {\r\n        // Prepend Image to the display message\r\n        this.statusRef.nativeElement.prepend(img);\r\n        // Add class to the display message\r\n        this.statusRef.nativeElement.classList.add(type);\r\n    }\r\n}\r\nPowerBiEmbeddedComponent.ɵfac = function PowerBiEmbeddedComponent_Factory(t) { return new (t || PowerBiEmbeddedComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject('BASE_URL')); };\r\nPowerBiEmbeddedComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PowerBiEmbeddedComponent, selectors: [[\"app-power-bi-embedded\"]], viewQuery: function PowerBiEmbeddedComponent_Query(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵviewQuery(PowerBIReportEmbedComponent, 5);\r\n        i0.ɵɵviewQuery(_c0, 5);\r\n        i0.ɵɵviewQuery(_c1, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reportObj = _t.first);\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.statusRef = _t.first);\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.embedBtnRef = _t.first);\r\n    } }, decls: 7, vars: 4, consts: [[\"class\", \"controls\", 4, \"ngIf\", \"ngIfElse\"], [\"embedReportFlow\", \"\"], [1, \"row\"], [3, \"embedConfig\", \"cssClassName\"], [1, \"controls\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"display-message\"], [\"status\", \"\"], [1, \"display-message\", \"position\"], [1, \"embed-report\", \"d-grid\", \"gap-2\"], [\"type\", \"button\", \"class\", \"btn btn-primary\", \"id\", \"rpt.reportId\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"separator\"], [\"type\", \"button\", \"id\", \"rpt.reportId\", 1, \"btn\", \"btn-primary\", 3, \"click\"]], template: function PowerBiEmbeddedComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"h1\");\r\n        i0.ɵɵtext(1, \"Power BI Embedded - Angular Demo\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵtemplate(2, PowerBiEmbeddedComponent_div_2_Template, 8, 2, \"div\", 0);\r\n        i0.ɵɵtemplate(3, PowerBiEmbeddedComponent_ng_template_3_Template, 7, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\r\n        i0.ɵɵelementStart(5, \"div\", 2);\r\n        i0.ɵɵelement(6, \"powerbi-paginated-report\", 3);\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        const _r1 = i0.ɵɵreference(4);\r\n        i0.ɵɵadvance(2);\r\n        i0.ɵɵproperty(\"ngIf\", ctx.isEmbedded)(\"ngIfElse\", _r1);\r\n        i0.ɵɵadvance(4);\r\n        i0.ɵɵproperty(\"embedConfig\", ctx.paginatedReportConfig)(\"cssClassName\", ctx.reportClass);\r\n    } }, directives: [i2.NgIf, i3.PowerBIPaginatedReportEmbedComponent, i2.NgForOf], styles: [\"iframe[_ngcontent-%COMP%] {\\r\\n  border: none;\\r\\n \\r\\n}\\r\\n\\r\\n\\r\\n.report-container[_ngcontent-%COMP%] {\\r\\n  margin: 8px auto;\\r\\n  width: 90%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvd2VyLWJpLWVtYmVkZGVkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7aUNBQ2lDOzs7QUFHakM7RUFDRSxZQUFZOztBQUVkOzs7QUFJQTtFQUNFLGdCQUFnQjtFQUNoQixVQUFVO0FBQ1oiLCJmaWxlIjoicG93ZXItYmktZW1iZWRkZWQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuICovXHJcblxyXG5cclxuaWZyYW1lIHtcclxuICBib3JkZXI6IG5vbmU7XHJcbiBcclxufVxyXG5cclxuXHJcblxyXG4ucmVwb3J0LWNvbnRhaW5lciB7XHJcbiAgbWFyZ2luOiA4cHggYXV0bztcclxuICB3aWR0aDogOTAlO1xyXG59XHJcbiJdfQ== */\"] });\r\n"]},"metadata":{},"sourceType":"module"}